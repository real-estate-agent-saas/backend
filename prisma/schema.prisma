generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------------------------------- (User Model) ------------------------------------------------
model User {
  // Login Data
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique // Intern email for login
  password String

  // Public exibition data
  tradingName     String? // Trading name for exibition
  publicEmail     String? // Public email for exibition
  whatsapp        String?
  phone           String?
  instagram       String?
  facebook        String?
  linkedin        String?
  profileImage    String?
  bio             String?
  careerStartDate DateTime?

  creci  String?
  gender Gender?

  isActive Boolean @default(true)

  // Relationships
  specialties    Specialty[] // User Specialties M-N (Many users can have many specialties)
  properties     Property[] // User Properties 1-N (One user can have many properties)
  dinamicWebsite DinamicWebsite? // User Dinamic Website 1-1 (One user can have one dinamic website)

  // Date control
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MASCULINO
  FEMININO
  OUTROS
}

//------------------------------------------------------ (Specialty Model) -------------------------------------------
model Specialty {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[] // Related to users M-N
}

//-------------------------------------------------- (Property and Relationships) ----------------------------------------------
model Property {
  id               Int      @id @default(autoincrement())
  title            String
  description      String?
  roomsQty         Int
  bathroomsQty     Int
  parkingSpacesQty Int
  area             Decimal?
  youtubeURL       String?
  price            Decimal?
  coverImage       String?
  isFurnished      Boolean?
  isNearSubway     Boolean?
  isFeatured       Boolean  @default(false)
  isActive         Boolean  @default(true)

  // Date Control
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation 1-N (One user can have many properties)
  userId Int

  address Address? //  1-1 (One property has one address)

  deliveryStatus   DeliveryStatus? @relation(fields: [deliveryStatusId], references: [id]) // 1-N (One property can have only one DeliveryStatus)
  deliveryStatusId Int?

  propertyTypology   PropertyTypology? @relation(fields: [propertyTypologyId], references: [id]) // 1-N (One property can have only one PropertyTypology)
  propertyTypologyId Int?

  propertyType   PropertyType? @relation(fields: [propertyTypeId], references: [id]) // 1-N (One property can have only one PropertyType) 
  propertyTypeId Int?

  propertyStanding   PropertyStanding? @relation(fields: [propertyStandingId], references: [id]) // 1-N (One property can have only one PropertyStanding)
  propertyStandingId Int?

  propertyPurpose   PropertyPurpose? @relation(fields: [propertyPurposeId], references: [id]) // 1-N (One property can have only one PropertyPurpose)
  propertyPurposeId Int?

  propertyGallery  PropertyGallery[] //  1-N (One property can have many images)
  floorPlanGallery FloorPlanGallery[] //  1-N (One property can have many floor plans)
  propertyLeisure  Leisure[] // M-N (Many properties can have many leisure)
}

model PropertyPurpose {
  id   Int    @id @default(autoincrement())
  name String @unique

  properties Property[] // 1-N (One property can have only one PropertyPurpose)
}

model PropertyStanding {
  id   Int    @id @default(autoincrement())
  name String @unique

  properties Property[] // 1-N (One property can have only one PropertyStanding)
}

model PropertyType {
  id   Int    @id @default(autoincrement())
  name String @unique

  properties Property[] // 1-N (One property can have only one PropertyType)
}

model PropertyTypology {
  id   Int    @id @default(autoincrement())
  name String @unique

  properties Property[] // 1-N (One property can have only one PropertyTypology)
}

model DeliveryStatus {
  id   Int    @id @default(autoincrement())
  name String @unique

  properties Property[] // 1-N (One property can have only one DeliveryStatus)
}

model Leisure {
  id   Int    @id @default(autoincrement())
  name String @unique

  properties Property[] // M-N (Many properties can have many Leisure)
}

model PropertyGallery {
  id         Int       @id @default(autoincrement())
  URL        String
  order      Int?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade) // Property relation 1-N (One property can have many images)
  propertyId Int?
}

model FloorPlanGallery {
  id          Int      @id @default(autoincrement())
  URL         String
  description String?
  order       Int?
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade) // Property relation 1-N (One property can have many floor plans)
  propertyId  Int
}

model Address {
  id             Int     @id @default(autoincrement())
  street         String
  propertyNumber String?
  complement     String?
  neighborhood   String
  city           String?
  zipCode        String?
  latitude       Float?
  longitude      Float?

  // 1-N (Many address can have only one zone)
  zone   Zone? @relation(fields: [zoneId], references: [id])
  zoneId Int?

  State   State? @relation(fields: [stateId], references: [id])
  stateId Int?

  // relação 1-1 with Property
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int      @unique
}

model State {
  id   Int    @id @default(autoincrement())
  name String @unique
  UF   String @unique

  // relação 1-N
  addresses Address[]
}

model Zone {
  id   Int    @id @default(autoincrement())
  name String @unique

  // relação 1-N
  addresses Address[]
}

//---------------------------------------------------------- (Dinamic Website)  ------------------------------------------------------------------

model DinamicWebsite {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade) // User relation 1-1 (One user can have one dinamic website)

  // Visual settings
  templateId Int
  template   Template @relation(fields: [templateId], references: [id]) // Template relation 1-N (One template can be used by many dinamic websites)
  logo       String?

  // Domain
  slug         String? @unique
  customDomain String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//---------------------------------------------------------- (Templates for Dinamic Websites)  ------------------------------------------------------------------
model Template {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  previewURL  String?
  sites       DinamicWebsite[] // Dinamic Website relation 1-N (One template can be used by many dinamic websites)
}
