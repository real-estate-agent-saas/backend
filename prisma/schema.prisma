generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------------------------------------------- User Model ------------------------------------------------
model User {
  // Login Data
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique // Intern email for login
  password String

  // Public exibition data
  publicEmail     String? // Public email for exibition
  whatsapp        String?
  phone           String?
  instagram       String?
  facebook        String?
  linkedin        String?
  profileImage    String?
  bio             String?
  careerStartDate DateTime?

  creci  String?
  gender Gender?

  isActive Boolean @default(true)

  // Relationships
  specialties Specialty[] // User Specialties M-N (Many users can have many specialties)
  properties  Property[] // User Properties 1-N (One user can have many properties)

  // Date control
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MASCULINO
  FEMININO
  OUTROS
}

//------------------------------------------------------ Specialty Model -------------------------------------------
model Specialty {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[] // Related to users M-N
}

//---------------------------------------------------------- Property, Enums and Relationships ----------------------------------------------

model Property {
  id               Int      @id @default(autoincrement())
  title            String
  description      String?
  roomsQty         Int
  bathroomsQty     Int
  parkingSpacesQty Int
  area             Decimal
  youtubeUrl       String?
  price            Decimal?
  coverImage       String?
  deliveryStatus   String?
  isFurnished      Boolean?
  isNearSubway     Boolean?
  isActive         Boolean  @default(true)

  // Enums
  propertyPurpose  PropertyPurpose?
  propertyStanding PropertyStanding?
  propertyType     PropertyType?
  propertyTypology PropertyTypology?

  // Date Control
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user             User               @relation(fields: [userId], references: [id]) // Relation 1-N (One property belongs to one user)
  userId           Int
  address          Address? // Relation 1-1 (One property has one address)
  propertyGallery  PropertyGallery[] // Relation 1-N (One property can have many images)
  floorPlanGallery FloorPlanGallery[] // Relation 1-N (One property can have many floor plans)
  propertyLeisure  Leisure[] // Relation M-N (Many properties can have many leisure options)
}

enum PropertyType {
  CASA
  APARTAMENTO
}

enum PropertyPurpose {
  VENDA
  LOCACAO
  ARRENDAMENTO
  TEMPORADA
  PERMUTA
  LEILAO
}

enum PropertyStanding {
  POPULAR
  MEDIO_PADRAO
  ALTO_PADRAO
}

enum PropertyTypology {
  STUDIO
  GARDEN
  DUPLEX
  TRIPLEX
  COBERTURA
  LOFT
  KITNET
  PENTHOUSE
  FLAT
  TOWNHOUSE
  CASA_TERREA
  SOBRADO
  CHALET
  VILA
  BANGALO
  CASA_DE_CAMPO
  FAZENDA
  SITIO
  CHACARA
  GALPAO
  SALA_COMERCIAL
  LOJA
  ANDAR_CORPORATIVO
  TERRENO
  LOTEAMENTO
}

model Address {
  id           Int     @id @default(autoincrement())
  street       String
  number       String?
  complement   String?
  neighborhood String
  zone         String
  city         String
  state        String
  zipCode      String
  latitude     Float
  longitude    Float

  property   Property @relation(fields: [propertyId], references: [id]) // Property relation 1-1 (One address belongs to one property)
  propertyId Int      @unique
}

model PropertyGallery {
  id         Int       @id @default(autoincrement())
  url        String
  order      Int?
  property   Property? @relation(fields: [propertyId], references: [id]) // Property relation 1-N (One property can have many images)
  propertyId Int?
}

model FloorPlanGallery {
  id          Int      @id @default(autoincrement())
  url         String
  description String?
  order       Int?
  property    Property @relation(fields: [propertyId], references: [id]) // Property relation 1-N (One property can have many floor plans)
  propertyId  Int
}

model Leisure {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  properties Property[] // Property relation M-N (Many leisure options can belong to many properties)
}
