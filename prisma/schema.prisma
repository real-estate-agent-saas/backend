generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Masculino
  Feminino
  Outro
}

// Modelo de Usuario
model User {
  // Dados para Login
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique // Email para login e interno
  password String

  // Dados para exibição pública
  publicEmail     String? // Email para exibição pública (opcional)
  whatsapp        String?
  phone           String?
  instagram       String?
  facebook        String?
  linkedin        String?
  profileImage    String?
  bio             String?
  careerStartDate DateTime?

  creci  String? // Registro CRECI
  gender Gender? // Masculino, Feminino, Outro

  isActive Boolean @default(true)

  // Relacionamentos
  specialties Specialty[] // Especialidades do usuário

  // Gerenciamento de Datas
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo de Especialidade
model Specialty {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[]
}


// Modelo de Propriedade no banco de dados
model Property {
  id          Int     @id @default(autoincrement())
  title       String
  description String?

  bedroomsMin      Int?
  bedroomsMax      Int?
  bathroomsMin     Int?
  bathroomsMax     Int?
  parkingSpacesMin Int?
  parkingSpacesMax Int?
  areaMin          Float?
  areaMax          Float?
  price            Float?

  street       String?
  number       String?
  complement   String?
  neighborhood String?
  city         String?
  state        String?
  zipCode      String?
  region       String?

  featuredImage String?
  photoGallery  String[]
  youTubeVideo  String?

  purpose     String?
  housingType String?
  isDraft     Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}








// enum PlanType {
//   FREE
//   BASIC
//   PREMIUM
//   ENTERPRISE
// }
// model Subscription {
//   id        Int       @id @default(autoincrement())
//   userId    Int // Chave estrangeira para o usuário
//   user      User      @relation(fields: [userId], references: [id]) // Relacionamento com o usuário
//   planType  PlanType  @default(FREE) // Tipo de plano (Padrão é o FREE)
//   startDate DateTime  @default(now()) // Data de início da assinatura
//   endDate   DateTime? // Data de término da assinatura (opcional)
//   isActive  Boolean   @default(true) // Indica se a assinatura está ativa
//   createdAt DateTime  @default(now()) // Data de criação do registro
//   updatedAt DateTime  @updatedAt // Data de atualização do registro
// }
